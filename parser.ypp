/*
 *  UFRGS - Compiladores - 2025-1
 *  Etapa 2
 *  Autoria: Luís Filipe Martini Gastmann
 */

%{
#include <stdio.h>
#include <stdlib.h>
#include "symbols.hpp"
#include "ast.h"

// Variável global para a raiz da AST
AST* ast_root = NULL;

extern int yylex(void);
extern int yyparse(void);
extern int getLineNumber(void);
extern FILE *yyin;
extern FILE* ast_output_file;

int yyerror(char const *s);
%}

%type <symbol> type

%left '+' '-'
%left '*' '/'
%left '<' '>' OPERATOR_LE OPERATOR_GE OPERATOR_EQ OPERATOR_DIF

%token <symbol> KW_BYTE
%token <symbol> KW_INT
%token <symbol> KW_REAL
%token <symbol> KW_STRING
%token <symbol> KW_CHAR

%token KW_IF
%token KW_ELSE
%token KW_DO
%token KW_WHILE
%token KW_READ
%token KW_PRINT
%token KW_RETURN

%token OPERATOR_LE
%token OPERATOR_GE
%token OPERATOR_EQ
%token OPERATOR_DIF

%token <symbol> TK_IDENTIFIER
%token <symbol> LIT_INT
%token <symbol> LIT_CHAR
%token <symbol> LIT_REAL
%token <symbol> LIT_STRING

%token TOKEN_ERROR

%union {
    AST* ast;
    void* symbol;
}

%type <ast> program decl_list decl global_var_decl var_decl func_decl param_list param_list_nonempty param block cmd_list cmd assignment expr_list expr func_call arg_list_opt arg_list literal_list literal 

%%

program: decl_list {
    ast_root = $1;
    astPrint($1, 0);
}
    ;

decl_list:
      /* empty */                 { $$ = NULL; }
    | decl_list decl              {
        if ($1) {
            AST* aux = $1;
            while (aux->next) aux = aux->next;
            aux->next = $2;
            $$ = $1;
        } else {
            $$ = $2;
        }
      }
    ;

decl:
      global_var_decl { $$ = $1; }
    | func_decl       { $$ = $1; }
    ;

global_var_decl:
      type TK_IDENTIFIER ';'                         { $$ = astCreate(AST_VAR_DECL, $2, NULL, NULL, NULL, NULL); $$->type_symbol = $1; }
    | type TK_IDENTIFIER '=' expr ';'                { $$ = astCreate(AST_VAR_DECL, $2, $4, NULL, NULL, NULL); $$->type_symbol = $1; }
    | type TK_IDENTIFIER '[' expr ']' ';'            { $$ = astCreate(AST_VAR_DECL, $2, $4, NULL, NULL, NULL); $$->type_symbol = $1; }
    | type TK_IDENTIFIER '[' expr ']' '=' literal_list ';' { $$ = astCreate(AST_VAR_DECL, $2, $4, $7, NULL, NULL); $$->type_symbol = $1; }
    ;

var_decl:
      type TK_IDENTIFIER ';'                         { $$ = astCreate(AST_VAR_DECL, $2, NULL, NULL, NULL, NULL); $$->type_symbol = $1; }
    | type TK_IDENTIFIER '=' expr ';'                { $$ = astCreate(AST_VAR_DECL, $2, $4, NULL, NULL, NULL); $$->type_symbol = $1; }
    | type TK_IDENTIFIER '[' expr ']' ';'            { $$ = astCreate(AST_VAR_DECL, $2, $4, NULL, NULL, NULL); $$->type_symbol = $1; }
    | type TK_IDENTIFIER '[' expr ']' '=' literal_list ';' { $$ = astCreate(AST_VAR_DECL, $2, $4, $7, NULL, NULL); $$->type_symbol = $1; }
    ;

literal_list:
      literal { $$ = $1; }
    | literal_list ',' literal {
        AST* aux = $1;
        while (aux->next) aux = aux->next;
        aux->next = $3;
        $$ = $1;
      }
    ;

func_decl:
      type TK_IDENTIFIER '(' param_list ')' block { $$ = astCreate(AST_FUNC_DECL, $2, $4, $6, NULL, NULL); $$->type_symbol = $1; }
    ;

param_list:
      /* empty */ { $$ = NULL; }
    | param_list_nonempty { $$ = $1; }
    ;

param_list_nonempty:
      param { $$ = $1; }
    | param_list_nonempty ',' param {
        AST* aux = $1;
        while (aux->next) aux = aux->next;
        aux->next = $3;
        $$ = $1;
      }
    ;

param:
      type TK_IDENTIFIER { $$ = astCreate(AST_PARAM_LIST, $2, NULL, NULL, NULL, NULL); $$->type_symbol = $1; }
    ;

block:
      '{' cmd_list '}' { $$ = astCreate(AST_BLOCK, NULL, $2, NULL, NULL, NULL); }
    ;

cmd_list:
      /* empty */ { $$ = NULL; }
    | cmd_list cmd {
        if ($1) {
            AST* aux = $1;
            while (aux->next) aux = aux->next;
            aux->next = $2;
            $$ = $1;
        } else {
            $$ = $2;
        }
      }
    ;

cmd:
      var_decl { $$ = $1; }
    | assignment ';' { $$ = $1; }
    | KW_READ TK_IDENTIFIER ';' { $$ = astCreate(AST_READ, $2, NULL, NULL, NULL, NULL); }
    | KW_PRINT expr_list ';' { $$ = astCreate(AST_PRINT, NULL, $2, NULL, NULL, NULL); }
    | KW_RETURN expr ';' { $$ = astCreate(AST_RETURN, NULL, $2, NULL, NULL, NULL); }
    | KW_IF '(' expr ')' cmd { $$ = astCreate(AST_IF, NULL, $3, $5, NULL, NULL); }
    | KW_IF '(' expr ')' cmd KW_ELSE cmd { $$ = astCreate(AST_IF_ELSE, NULL, $3, $5, $7, NULL); }
    | KW_WHILE expr KW_DO cmd { $$ = astCreate(AST_WHILE, NULL, $2, $4, NULL, NULL); }
    | KW_DO cmd KW_WHILE '(' expr ')' ';' { $$ = astCreate(AST_DO_WHILE, NULL, $2, $5, NULL, NULL); }
    | block { $$ = $1; }
    | func_call ';' { $$ = $1; }
    ;

assignment:
      TK_IDENTIFIER '=' expr { $$ = astCreate(AST_ASSIGN, $1, $3, NULL, NULL, NULL); }
    | TK_IDENTIFIER '[' expr ']' '=' expr { $$ = astCreate(AST_ASSIGN, $1, $3, $6, NULL, NULL); }
    ;

expr_list:
      /* empty */ { $$ = NULL; }
    | expr_list expr {
        if ($1) {
            AST* aux = $1;
            while (aux->next) aux = aux->next;
            aux->next = $2;
            $$ = $1;
        } else {
            $$ = $2;
        }
      }
    ;

expr:
      TK_IDENTIFIER { $$ = astCreate(AST_SYMBOL, $1, NULL, NULL, NULL, NULL); }
    | TK_IDENTIFIER '[' expr ']' { $$ = astCreate(AST_OP, "INDEX", astCreate(AST_SYMBOL, $1, NULL, NULL, NULL, NULL), $3, NULL, NULL); }
    | func_call { $$ = $1; }
    | '(' expr ')' { $$ = $2; }
    | expr '+' expr { $$ = astCreate(AST_OP, (void*)"+", $1, $3, NULL, NULL); }
    | expr '-' expr { $$ = astCreate(AST_OP, (void*)"-", $1, $3, NULL, NULL); }
    | expr '*' expr { $$ = astCreate(AST_OP, (void*)"*", $1, $3, NULL, NULL); }
    | expr '/' expr { $$ = astCreate(AST_OP, (void*)"/", $1, $3, NULL, NULL); }
    | expr '<' expr { $$ = astCreate(AST_OP, (void*)"<", $1, $3, NULL, NULL); }
    | expr '>' expr { $$ = astCreate(AST_OP, (void*)">", $1, $3, NULL, NULL); }
    | expr '=' expr { $$ = astCreate(AST_OP, (void*)"=", $1, $3, NULL, NULL); }
    | expr "!=" expr { $$ = astCreate(AST_OP, (void*)"!=", $1, $3, NULL, NULL); }
    | expr OPERATOR_LE expr { $$ = astCreate(AST_OP, (void*)"<=", $1, $3, NULL, NULL); }
    | expr OPERATOR_GE expr { $$ = astCreate(AST_OP, (void*)">=", $1, $3, NULL, NULL); }
    | expr OPERATOR_EQ expr { $$ = astCreate(AST_OP, (void*)"==", $1, $3, NULL, NULL); }
    | expr OPERATOR_DIF expr { $$ = astCreate(AST_OP, (void*)"!=", $1, $3, NULL, NULL); }
    | LIT_INT   { $$ = astCreate(AST_SYMBOL, $1, NULL, NULL, NULL, NULL); }
    | LIT_REAL  { $$ = astCreate(AST_SYMBOL, $1, NULL, NULL, NULL, NULL); }
    | LIT_CHAR  { $$ = astCreate(AST_SYMBOL, $1, NULL, NULL, NULL, NULL); }
    | LIT_STRING{ $$ = astCreate(AST_SYMBOL, $1, NULL, NULL, NULL, NULL); }
    ;

func_call:
      TK_IDENTIFIER '(' arg_list_opt ')' { $$ = astCreate(AST_FUNC_CALL, $1, $3, NULL, NULL, NULL); }
    ;

arg_list_opt:
      /* empty */ { $$ = NULL; }
    | arg_list { $$ = $1; }
    ;

arg_list:
      expr { $$ = $1; }
    | arg_list ',' expr {
        AST* aux = $1;
        while (aux->next) aux = aux->next;
        aux->next = $3;
        $$ = $1;
      }
    ;

literal: LIT_INT    { $$ = astCreate(AST_SYMBOL, $1, NULL, NULL, NULL, NULL); }
       | LIT_REAL   { $$ = astCreate(AST_SYMBOL, $1, NULL, NULL, NULL, NULL); }
       | LIT_CHAR   { $$ = astCreate(AST_SYMBOL, $1, NULL, NULL, NULL, NULL); }
       | LIT_STRING { $$ = astCreate(AST_SYMBOL, $1, NULL, NULL, NULL, NULL); }
       ;

type:
      KW_BYTE   { $$ = $1; }
    | KW_REAL   { $$ = $1; }
    | KW_INT    { $$ = $1; }
    | KW_STRING { $$ = $1; }
    | KW_CHAR   { $$ = $1; }
    ;

%%

int yyerror(char const *s) {
    fprintf(stderr, "Error on line %d: %s\n", getLineNumber(), s);
    exit(3);
}
