/*
 *  UFRGS - Compiladores - 2025-1
 *  Etapa 2
 *  Autoria: Lu√≠s Filipe Martini Gastmann
 */

%{
#include <stdio.h>
#include <stdlib.h>
#include "symbols.hpp"

extern int yylex(void);
extern int yyparse(void);
extern int getLineNumber(void);
extern FILE *yyin;

int yyerror(char const *s);
%}

%left '+' '-'
%left '*' '/'
%left '<' '>' OPERATOR_LE OPERATOR_GE OPERATOR_EQ OPERATOR_DIF

%token KW_BYTE
%token KW_INT
%token KW_REAL
%token KW_STRING
%token KW_CHAR

%token KW_IF
%token KW_ELSE
%token KW_DO
%token KW_WHILE
%token KW_READ
%token KW_PRINT
%token KW_RETURN

%token OPERATOR_LE
%token OPERATOR_GE
%token OPERATOR_EQ
%token OPERATOR_DIF

%token TK_IDENTIFIER

%token LIT_INT
%token LIT_CHAR
%token LIT_REAL
%token LIT_STRING

%token TOKEN_ERROR

%%

program: decl_list
    ;

decl_list: decl decl_list
    | decl
    ;

decl: global_var_decl
    | func_decl
    ;

global_var_decl: type TK_IDENTIFIER ';'
    | type TK_IDENTIFIER '=' literal ';'
    | type TK_IDENTIFIER '[' LIT_INT ']' ';'
    | type TK_IDENTIFIER '[' LIT_INT ']' '=' init_vector ';'
    ;

var_decl: type TK_IDENTIFIER ';'
    | type TK_IDENTIFIER '=' expr ';'
    | type TK_IDENTIFIER '[' expr ']' ';'
    | type TK_IDENTIFIER '[' expr ']' '=' init_vector ';'
    ;

init_vector: literal_list
    | /* empty */
    ;

literal_list: literal ',' literal_list
    | literal
    ;

func_decl: type TK_IDENTIFIER '(' param_list ')' block
    ;

param_list: param param_tail
    |
    ;

param_tail: ',' param param_tail
    |
    ;

param: type TK_IDENTIFIER
    ;

block: '{' cmd_list '}'
    ;

cmd_list: cmd cmd_list
    | /* empty */
    ;

cmd: var_decl
    | assignment ';'
    | KW_READ TK_IDENTIFIER ';'
    | KW_PRINT expr_list ';'
    | KW_RETURN expr ';'
    | KW_IF '(' expr ')' cmd
    | KW_IF '(' expr ')' cmd KW_ELSE cmd
    | KW_DO cmd KW_WHILE '(' expr ')' ';'
    | KW_WHILE '(' expr ')' KW_DO cmd ';'
    | block
    | func_call ';'
    | ';'
    ;

assignment: TK_IDENTIFIER '=' expr
    | TK_IDENTIFIER '[' expr ']' '=' expr
    ;

expr_list: expr expr_list_tail
    | /* empty */
    ;

expr_list_tail: ',' expr expr_list_tail
    | /* empty */
    ;

expr: TK_IDENTIFIER
    | TK_IDENTIFIER '[' expr ']'
    | func_call
    | '(' expr ')'
    | expr '+' expr
    | expr '-' expr
    | expr '*' expr
    | expr '/' expr
    | expr '<' expr
    | expr '>' expr
    | expr OPERATOR_LE expr
    | expr OPERATOR_GE expr
    | expr OPERATOR_EQ expr
    | expr OPERATOR_DIF expr
    | literal
    ;

func_call: TK_IDENTIFIER '(' args ')'
    ;

args: arg_list
    | /* empty */
    ;

arg_list: expr
    | expr ',' arg_list
    ;

literal: LIT_INT
    | LIT_REAL
    | LIT_CHAR
    | LIT_STRING
    ;

type: KW_BYTE
    | KW_REAL
    | KW_INT    
    | KW_STRING
    | KW_CHAR
    ;

%%

int yyerror(char const *s) {
    fprintf(stderr, "Error on line %d: %s\n", getLineNumber(), s);
    exit(3);
}
